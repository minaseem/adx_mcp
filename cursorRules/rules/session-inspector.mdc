---
description: 
globs: 
alwaysApply: false
---
Below is the json schema of Grafana dashboard that take InstanceId as input and use to inspect user session. It can also use to explore user sessions based on user id, org id etc.


{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 4639,
  "iteration": 1744255538068,
  "links": [
    {
      "asDropdown": false,
      "icon": "external link",
      "includeVars": false,
      "keepTime": false,
      "tags": [],
      "targetBlank": true,
      "title": "If you need assistance or have suggestions, feel free to contact us on the Slack channel - #session-inspector",
      "tooltip": "",
      "type": "link",
      "url": "https://adobe.enterprise.slack.com/archives/C06DWNA19K3"
    },
    {
      "asDropdown": false,
      "icon": "external link",
      "includeVars": false,
      "keepTime": false,
      "tags": [],
      "targetBlank": true,
      "title": "Raise a bug/feature request by cloning CJM-59929",
      "tooltip": "",
      "type": "link",
      "url": "https://jira.corp.adobe.com/browse/CJM-59929"
    }
  ],
  "liveNow": false,
  "panels": [
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 27,
      "panels": [],
      "title": "Explore Sessions",
      "type": "row"
    },
    {
      "datasource": {
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "${DataSource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "OrgId"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 216
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Org Id"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 126
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "AuthId"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 227
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Started At"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 184
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Ended At"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 181
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "InstanceId"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 341
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 15,
        "x": 0,
        "y": 1
      },
      "id": 25,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "Browser"
          }
        ]
      },
      "pluginVersion": "8.5.13",
      "targets": [
        {
          "OpenAI": false,
          "database": "Metrics",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "${DataSource}"
          },
          "expression": {
            "from": {
              "property": {
                "name": "PCA",
                "type": "string"
              },
              "type": "property"
            },
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "4.6.3",
          "query": "let users = materialize(User\n| where $__timeFilter(TimeStamp) and tolower(strcat(AuthId, '#', GroupId, '#', GroupName, '#', DisplayName)) contains tolower(\"${userAttribute}\") and (isempty(\"${instanceId}\") or InstanceId == \"${instanceId}\")  and \"SI_SessionExplorer\" == \"SI_SessionExplorer\" and \"email:${__user.email}\" == \"email:${__user.email}\"\n| project UserHash, AuthId, GroupId, GroupName, DisplayName\n| distinct UserHash, AuthId, GroupId, GroupName, DisplayName);\n\nlet userHashes = users\n| distinct UserHash;\n\nlet _userLogs = materialize(Log\n| where $__timeFilter(TimeStamp) and UserHash in (userHashes) and (isempty(\"${instanceId}\") or InstanceId == \"${instanceId}\")\n| summarize startTime=min(TimeStamp), endTime=max(TimeStamp) , UserHash = tostring(make_set(UserHash)[0]) by InstanceId);\n\n\nlet userLogs = users\n| join kind=inner  _userLogs on UserHash;\n\nlet usercubes = UserCube\n| where $__timeFilter(TimeStamp) and tolower(strcat(AuthId, '#', GroupId, '#', GroupName)) contains tolower(\"${userAttribute}\") and (isempty(\"${instanceId}\") or InstanceId == \"${instanceId}\")\n| summarize Browser = tostring(make_set(Browser)[0]) by InstanceId;\n\nuserLogs\n| join kind=leftouter usercubes on InstanceId\n| project ['Started At (First event time)']=startTime, ['Ended At (Last event time)']=endTime, ['User Name'] = DisplayName, ['Org Name']=GroupName, InstanceId, AuthId, ['Org Id']=GroupId, Browser=Browser",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "User sessions",
      "type": "table"
    },
    {
      "datasource": {
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "${DataSource}"
      },
      "description": "This contains max 100 records",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "HistoryId"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 127
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "InstanceId"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 119
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "TimeStamp"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 146
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 9,
        "x": 15,
        "y": 1
      },
      "id": 15,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "8.5.13",
      "targets": [
        {
          "OpenAI": false,
          "database": "Metrics",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "${DataSource}"
          },
          "expression": {
            "from": {
              "property": {
                "name": "PCA",
                "type": "string"
              },
              "type": "property"
            },
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "4.6.3",
          "query": "Log\n| where $__timeFilter(TimeStamp) and  (${scope} == false or MetricsState.window.iframe == ${scope})  and InstanceId contains \"${instanceId}\" and HistoryId contains \"${historyId}\"\n| summarize TimeStamp=min(TimeStamp), Application=tostring(make_set(MetricsState.application.id)) by InstanceId, HistoryId\n| where HistoryId != '' and InstanceId != ''\n| project TimeStamp, InstanceId, HistoryId, Application\n| order by TimeStamp asc\n| limit 100",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Instance Id ⇔ History Id(Reference ID) mapping",
      "type": "table"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 9
      },
      "id": 21,
      "panels": [],
      "title": "Inspect Session",
      "type": "row"
    },
    {
      "datasource": {
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "${DataSource}"
      },
      "description": "This shows max 100 entries",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "error"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 216
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "url"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 209
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Event"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 269
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Timestamp"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 182
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "stacktrace"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 319
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "stacktrace"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "",
                    "url": "https://git.corp.adobe.com/pages/naseem/stacktrace-mapper/?stacktrace=${__value.raw}"
                  }
                ]
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 13,
        "w": 24,
        "x": 0,
        "y": 10
      },
      "id": 2,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": false,
            "displayName": "Error"
          }
        ]
      },
      "pluginVersion": "8.5.13",
      "targets": [
        {
          "database": "Metrics",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "${DataSource}"
          },
          "expression": {
            "from": {
              "property": {
                "name": "User",
                "type": "string"
              },
              "type": "property"
            },
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": false,
          "pluginVersion": "4.3.0",
          "query": "Log\n| where $__timeFilter(TimeStamp) and RecordType == \"Log\" and Level == \"ERROR\" and Event in (\"uncaughtException\", \"uncaughtPromiseRejection\")  and (${scope} == false or MetricsState.window.iframe == ${scope}) and InstanceId contains \"${instanceId}\" and HistoryId contains \"${historyId}\" and \"SessionInspectorTracker\" == \"SessionInspectorTracker\"  and \"email:${__user.email}\" == \"email:${__user.email}\"\n| project Timestamp = TimeStamp,  Event=Event, Error = coalesce(Data.error, Data.reason).message, stacktrace = tostring(coalesce(Data.error, Data.reason).stack), WindowURL = WindowHRef, Application = tostring(MetricsState.application.id)\n| limit 100\n| order by Timestamp asc;\n",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "JS Errors/Exceptions",
      "type": "table"
    },
    {
      "datasource": {
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "${DataSource}"
      },
      "description": "This shows the list API requests receiving 4xx and 5xx . This shows max 500 entries",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "error"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 216
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "requestId"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 286
              },
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "",
                    "url": "https://splunk.or1.adobe.net/en-US/app/search/search?q=search%20${__value.raw}&earliest=0&latest="
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "apiURL"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 643
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "status"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 66
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Timestamp"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 210
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "message"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 140
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Response Time(ms)"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 152
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 13,
        "w": 24,
        "x": 0,
        "y": 23
      },
      "id": 7,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "8.5.13",
      "targets": [
        {
          "database": "Metrics",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "${DataSource}"
          },
          "expression": {
            "from": {
              "property": {
                "name": "User",
                "type": "string"
              },
              "type": "property"
            },
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": false,
          "pluginVersion": "4.3.0",
          "query": "let requests = Log\n| where $__timeFilter(TimeStamp)  and RecordType == \"NetworkRequest\" and (${scope} == false or MetricsState.window.iframe == ${scope})  and InstanceId contains \"${instanceId}\" and HistoryId contains \"${historyId}\"\n| project correlationId=tostring(MetricsState.correlationId), req_requestId = coalesce(Data.requestId, ''), Application = tostring(MetricsState.application.id);\n\n\nlet errors4xx5xx = Log\n| where $__timeFilter(TimeStamp)  and RecordType == \"NetworkResponse\"  and (${scope} == false or MetricsState.window.iframe == ${scope}) and (strcat(Event, '') startswith \"4\" or strcat(Event, '') startswith \"5\" or Event == 'Error')  and InstanceId contains \"${instanceId}\" and HistoryId contains \"${historyId}\"\n| project Timestamp = TimeStamp,  apiURL=NetworkURL, status=toint(Event), res_requestId=tostring(Data.headers['x-request-id']), message = tostring(Message), WindowURL = WindowHRef,  _status=Event, correlationId=tostring(MetricsState.correlationId), ResponseTime=todouble(Duration)/10000\n| order by Timestamp asc;\n\nlet errors4xx5xxWithReqId = errors4xx5xx\n| join kind=inner requests on correlationId\n| extend requestId=coalesce(res_requestId, req_requestId);\n\n\nlet logs200 = Log\n| where $__timeFilter(TimeStamp)  and RecordType == \"NetworkResponse\"  and (${scope} == false or MetricsState.window.iframe == ${scope}) and Event == 200  and InstanceId contains \"${instanceId}\" and HistoryId contains \"${historyId}\" and Data.headers['x-request-id'] != \"\"\n| project Timestamp = TimeStamp,  apiURL=NetworkURL, requestId = tostring(Data.headers['x-request-id']), WindowURL = WindowHRef, Application = tostring(MetricsState.application.id), ResponseTime=todouble(Duration)/10000, apiStatus=Event\n| order by Timestamp asc;\n\nlet graphQLReportedErrors = Log\n| where $__timeFilter(TimeStamp)\n| where Event == \"kernel.upstream.api.failure\"\n| project requestId = tostring(Data.requestId), status = toint(Data.status), message = tostring(Data.errorCode)\n| join logs200 on requestId\n| project Timestamp=Timestamp, apiURL = apiURL, message = message, __status=coalesce(toint(apiStatus), status), requestId = requestId, WindowURL = WindowURL, Application, ResponseTime, failedBeyondGQL='Yes';\n\nerrors4xx5xxWithReqId\n| union  graphQLReportedErrors\n| limit 500\n| extend status=coalesce(tostring(__status), tostring(_status))\n| project Timestamp, apiURL, message, status, ['Response Time(ms)']=ResponseTime, failedBeyondGQL, requestId, WindowURL, Application\n| order by Timestamp asc;",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Network errors",
      "type": "table"
    },
    {
      "datasource": {
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "${DataSource}"
      },
      "description": "This shows max 2000 entries",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "error"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 216
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "requestId"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 324
              },
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "",
                    "url": "https://splunk.or1.adobe.net/en-US/app/search/search?q=search%20${__value.raw}&earliest=0&latest="
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "status"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 73
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Timestamp"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 193
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "method"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 83
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "failedBeyondGQL"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 139
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "apiURL"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 620
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Response Time(ms)"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 146
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 13,
        "w": 24,
        "x": 0,
        "y": 36
      },
      "id": 10,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": false,
            "displayName": "Timestamp"
          }
        ]
      },
      "pluginVersion": "8.5.13",
      "targets": [
        {
          "database": "Metrics",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "${DataSource}"
          },
          "expression": {
            "from": {
              "property": {
                "name": "User",
                "type": "string"
              },
              "type": "property"
            },
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "hide": false,
          "pluginVersion": "4.3.0",
          "query": "let requests = Log\n| where $__timeFilter(TimeStamp)  and RecordType == \"NetworkRequest\" and (${scope} == false or MetricsState.window.iframe == ${scope})  and InstanceId contains \"${instanceId}\" and HistoryId contains \"${historyId}\"\n| project Timestamp=TimeStamp, correlationId=tostring(MetricsState.correlationId), apiURL = NetworkURL, method = Data.method, requestId = coalesce(Data.requestId, ''), WindowHRef;\n\n\nlet responses = Log\n| where $__timeFilter(TimeStamp) and RecordType == \"NetworkResponse\"and (${scope} == false or MetricsState.window.iframe == ${scope})  and InstanceId contains \"${instanceId}\" and HistoryId contains \"${historyId}\"\n| project correlationId=tostring(MetricsState.correlationId), status = Event, Application = tostring(MetricsState.application.id), responseRequestId = coalesce(Data.headers['x-request-id'], ''), Duration;\n\nlet requestResponse = requests\n| join kind=leftouter  responses on correlationId\n| project Timestamp=Timestamp, apiURL= apiURL, method = tostring(method), status = status, ResponseTime=todouble(Duration)/10000, requestId = coalesce(requestId, responseRequestId), Application , WindowURL=WindowHRef;\n\n\nlet graphQLFailures = Log\n| where $__timeFilter(TimeStamp)\n| where Event == \"kernel.upstream.api.failure\"\n| project requestId = tostring(Data.requestId), failedBeyondGQL='Yes';\n\nrequestResponse\n| join kind = leftouter graphQLFailures on requestId\n| project Timestamp=Timestamp, apiURL= apiURL, method = tostring(method), status = status, ['Response Time(ms)']=ResponseTime, failedBeyondGQL = failedBeyondGQL, requestId = requestId, WindowURL, Application\n| limit 2000\n| order by Timestamp asc;\n\n",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Network logs",
      "type": "table"
    },
    {
      "datasource": {
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "${DataSource}"
      },
      "description": "This shows the Network logs for fetching Javascript and CSS files.\nThis shows max 500 entries",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "NetworkURL"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 811
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "TimeStamp"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 280
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 12,
        "w": 24,
        "x": 0,
        "y": 49
      },
      "id": 17,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "8.5.13",
      "targets": [
        {
          "OpenAI": false,
          "database": "Metrics",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "${DataSource}"
          },
          "expression": {
            "from": {
              "property": {
                "name": "PCA",
                "type": "string"
              },
              "type": "property"
            },
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "4.6.3",
          "query": "Log\n| where $__timeFilter(TimeStamp)\n| where Data.initiatorType in ('script', 'link')  and (${scope} == false or MetricsState.window.iframe == ${scope})  and InstanceId contains \"${instanceId}\" and HistoryId contains \"${historyId}\"\n| project TimeStamp, NetworkURL, ['Response Status'] = Data.responseStatus, Application = tostring(MetricsState.application.id), ['Transfer Size(KB)']=round(Data.transferSize/1024), ['Time Taken(ms)'] = round(todouble(Data.responseEnd) - todouble(Data.requestStart))\n| limit 500\n| order by TimeStamp asc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "ResourceFetch(script/css) logs",
      "type": "table"
    },
    {
      "datasource": {
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "${DataSource}"
      },
      "description": "This logs events belongs to exc.core.modules.Sandbox, exc.module-runtime and exc.core.modules.Iframe\n\nThis shows max 1000 entries",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Message"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 242
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Event"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 235
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 212
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "TimeStamp"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 197
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 0,
        "y": 61
      },
      "id": 13,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": false,
            "displayName": "TimeStamp"
          }
        ]
      },
      "pluginVersion": "8.5.13",
      "targets": [
        {
          "OpenAI": false,
          "database": "Metrics",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "${DataSource}"
          },
          "expression": {
            "from": {
              "property": {
                "name": "PCA",
                "type": "string"
              },
              "type": "property"
            },
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "4.6.3",
          "query": "Log\n| where $__timeFilter(TimeStamp)\n| where  (Name in ('exc.core.App', 'exc.core.modules.Sandbox', 'exc.module-runtime', 'exc.core.modules.Iframe', 'exc.core.services.AppMonitorService') or Event in ('networkOnline', 'networkOffline')) and (${scope} == false or MetricsState.window.iframe == ${scope})  and InstanceId contains \"${instanceId}\" and HistoryId contains \"${historyId}\"\n| project TimeStamp, Name, Event, ['Application'] = tostring(MetricsState.application.id), Message\n| limit 1000\n| order by TimeStamp asc",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "EXC Events",
      "type": "table"
    },
    {
      "datasource": {
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "${DataSource}"
      },
      "description": "This logs events related to user interactions(clicks and Keyboard input).",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Message"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 242
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Event"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 122
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 306
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "TimeStamp"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 197
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "elementPath"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 515
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "application"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 193
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Application"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 151
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 12,
        "y": 61
      },
      "id": 28,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": false,
            "displayName": "TimeStamp"
          }
        ]
      },
      "pluginVersion": "8.5.13",
      "targets": [
        {
          "OpenAI": false,
          "database": "Metrics",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "${DataSource}"
          },
          "expression": {
            "from": {
              "property": {
                "name": "PCA",
                "type": "string"
              },
              "type": "property"
            },
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "4.6.3",
          "query": "Log\n| where $__timeFilter(TimeStamp) and RecordType == \"UserEvent\" and (${scope} == false or MetricsState.window.iframe == ${scope})  and InstanceId contains \"${instanceId}\" and HistoryId contains \"${historyId}\"\n| limit 500\n| project TimeStamp, Event, ElementPath=Data.elementPath, PageURL=WindowHRef, Application=MetricsState.application.id",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "User Interactions",
      "type": "table"
    },
    {
      "datasource": {
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "${DataSource}"
      },
      "description": "This shows the list of URLs user visited",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Message"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 242
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Event"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 235
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 212
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "TimeStamp"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 197
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "WindowHRef"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 1163
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "URL"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 1083
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 68
      },
      "id": 33,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": false,
            "displayName": "TimeStamp"
          }
        ]
      },
      "pluginVersion": "8.5.13",
      "targets": [
        {
          "OpenAI": false,
          "database": "Metrics",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "${DataSource}"
          },
          "expression": {
            "from": {
              "property": {
                "name": "PCA",
                "type": "string"
              },
              "type": "property"
            },
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "4.6.3",
          "query": "Log\n| where $__timeFilter(TimeStamp)\n| where (${scope} == false or MetricsState.window.iframe == ${scope})  and InstanceId contains \"${instanceId}\" and HistoryId contains \"${historyId}\"  and MetricsState.application.id == 'unified-shell'\n| order by TimeStamp asc  // Sort events in order\n| extend PrevURL = prev(WindowHRef)  // Get previous row's URL\n| where isnull(PrevURL) or PrevURL != WindowHRef  // Keep first URL and navigation changes\n| project TimeStamp, URL=WindowHRef, AppId=tostring(MetricsState.application.solution.id)\n",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "URLs visited",
      "type": "table"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 76
      },
      "id": 31,
      "panels": [],
      "title": "Inspect API",
      "type": "row"
    },
    {
      "datasource": {
        "type": "grafana-azure-data-explorer-datasource",
        "uid": "${DataSource}"
      },
      "description": "This shows the logs of the API request to which requestId/InstanceId/HistoryId filter belongs to. This contains UI and GQL logs. It shows top 2000 records",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Event"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 204
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Message"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 195
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 316
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "TimeStamp"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 169
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "RequestId"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 171
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 16,
        "w": 24,
        "x": 0,
        "y": 77
      },
      "id": 32,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": false,
            "displayName": "TimeStamp"
          }
        ]
      },
      "pluginVersion": "8.5.13",
      "targets": [
        {
          "OpenAI": false,
          "database": "Metrics",
          "datasource": {
            "type": "grafana-azure-data-explorer-datasource",
            "uid": "${DataSource}"
          },
          "expression": {
            "from": {
              "property": {
                "name": "PCA",
                "type": "string"
              },
              "type": "property"
            },
            "groupBy": {
              "expressions": [],
              "type": "and"
            },
            "reduce": {
              "expressions": [],
              "type": "and"
            },
            "where": {
              "expressions": [],
              "type": "and"
            }
          },
          "pluginVersion": "4.6.3",
          "query": "Log\n| where $__timeFilter(TimeStamp) and (Data.requestId == '${requestId}' or Data.headers['x-request-id'] == '${requestId}')  and InstanceId contains \"${instanceId}\" and HistoryId contains \"${historyId}\" and (MetricsState.application.id startswith \"gql-\" or MetricsState.application.id == \"graph-gateway\" or Name == 'exc.metrics-browser-runtime.network')  and \"SI_APIExplorer\" == \"SI_APIExplorer\" and \"email:${__user.email}\" == \"email:${__user.email}\"\n| project TimeStamp, NetworkURL, RequestId=tostring(coalesce(Data.requestId, Data.headers['x-request-id'])), Message, Event, ['Duration (ms)']=todouble(Duration)/10000,ApplicationId=tostring(MetricsState.application.id), Data, HistoryId, InstanceId\n| limit 2000\n",
          "querySource": "raw",
          "queryType": "KQL",
          "rawMode": true,
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "API logs",
      "type": "table"
    }
  ],
  "refresh": false,
  "schemaVersion": 36,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "ADX-prod",
          "value": "ADX-prod"
        },
        "hide": 0,
        "includeAll": false,
        "label": "DataSource",
        "multi": false,
        "name": "DataSource",
        "options": [],
        "query": "grafana-azure-data-explorer-datasource",
        "queryValue": "",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "type": "datasource"
      },
      {
        "current": {
          "selected": false,
          "text": "",
          "value": ""
        },
        "description": "",
        "hide": 0,
        "label": "User Name/Auth Id/OrgId/Org Name",
        "name": "userAttribute",
        "options": [
          {
            "selected": true,
            "text": "",
            "value": ""
          }
        ],
        "query": "",
        "skipUrlSync": false,
        "type": "textbox"
      },
      {
        "current": {
          "selected": false,
          "text": "",
          "value": ""
        },
        "hide": 0,
        "label": "InstanceId",
        "name": "instanceId",
        "options": [
          {
            "selected": true,
            "text": "",
            "value": ""
          }
        ],
        "query": "",
        "skipUrlSync": false,
        "type": "textbox"
      },
      {
        "current": {
          "selected": true,
          "text": "",
          "value": ""
        },
        "hide": 0,
        "label": "Reference Id/HistoryId",
        "name": "historyId",
        "options": [
          {
            "selected": true,
            "text": "",
            "value": ""
          }
        ],
        "query": "",
        "skipUrlSync": false,
        "type": "textbox"
      },
      {
        "current": {
          "selected": false,
          "text": "Shell + SPA",
          "value": "false"
        },
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "scope",
        "options": [
          {
            "selected": false,
            "text": "SPA only",
            "value": "true"
          },
          {
            "selected": true,
            "text": "Shell + SPA",
            "value": "false"
          }
        ],
        "query": "SPA only : true, Shell + SPA : false",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "",
          "value": ""
        },
        "hide": 0,
        "label": "Request Id",
        "name": "requestId",
        "options": [
          {
            "selected": true,
            "text": "",
            "value": ""
          }
        ],
        "query": "",
        "skipUrlSync": false,
        "type": "textbox"
      }
    ]
  },
  "time": {
    "from": "now-15m",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Session inspector",
  "uid": "E_BPCRD4z",
  "version": 191,
  "weekStart": ""
}
